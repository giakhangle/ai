{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyP09uIW3DIp+X3n0At94tjF",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/giakhangle/ai/blob/main/DFS\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4Ugm9R7GFpdF",
        "outputId": "8096529d-7f13-44b3-da97-555c3fe3d5d3"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "DEF starts with vertex 2\n",
            "2 0 1 3 "
          ]
        }
      ],
      "source": [
        "from _collections import defaultdict\n",
        "class Graph:\n",
        "  #Hàm khởi tạo\n",
        "  def __init__(self):\n",
        "    #Dùng dictionary để lưu đồ thị\n",
        "    self.graph=defaultdict(list)\n",
        "  \n",
        "  #Hàm thêm 1 cạch vào đồ thị\n",
        "  def addEdge(self, u, v):\n",
        "    self.graph[u].append(v)\n",
        "  \n",
        "  #Hàm đánh dấu đỉnh v đang xét và xét các đỉnh kề với đỉnh v\n",
        "  def DFSUtil(self, v, visited):\n",
        "    #đánh dấu đỉnh đang xét đã đi qua\n",
        "    visited[v]=True\n",
        "    print(v, end=' ')\n",
        "  \n",
        "    #đệ qui tất cả các đỉnh kề vói v đang xét\n",
        "    for i in self.graph[v]:\n",
        "      if visited[i] == False:\n",
        "        self.DFSUtil(i, visited)\n",
        "    \n",
        "  def DFS(self, v):\n",
        "    #Đánh dấu tất cả các đỉnh chưa đi qua\n",
        "    visited = [False]*(max(self.graph)+1)\n",
        "\n",
        "    #gọi hàm DESUtil để duyệt đồ thị\n",
        "    self.DFSUtil(v, visited)\n",
        "\n",
        "if __name__ == '__main__':\n",
        "  g=Graph()\n",
        "  g.addEdge(0,1) \n",
        "  g.addEdge(0,2)\n",
        "  g.addEdge(1,2)\n",
        "  g.addEdge(2,0)\n",
        "  g.addEdge(2,3)\n",
        "  g.addEdge(3,3)\n",
        "  print(\"DEF starts with vertex 2\")\n",
        "  g.DFS(2)  "
      ]
    }
  ]
}